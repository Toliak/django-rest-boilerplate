"""
Django settings for myproject project.

Generated by 'django-admin startproject' using Django 3.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

import os
from pathlib import Path

from myproject import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config.SECRET_KEY

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config.DEBUG

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'myproject.core.apps.CoreConfig',
    'django_celery_beat',
    'django_summernote',
    'rest_framework',
    'stdimage',
    'storages',
    'dbbackup',  # django-dbbackup
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'pe_hook.middlewares.PurpleEntryExceptionHandler',
]

ROOT_URLCONF = 'myproject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'myproject.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': config.DB_AUTH['driver'],
        'NAME': config.DB_AUTH['name'],
        'USER': config.DB_AUTH['username'],
        'PASSWORD': config.DB_AUTH['password'],
        'HOST': config.DB_AUTH['host'],
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Rest framework

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication'
    ),
    'DATETIME_FORMAT': '%s',
}

# CORS Setup

CORS_ORIGIN_WHITELIST = [
    'http://127.0.0.1:3000',
    'https://127.0.0.1:3000',
    # TODO: Put your website URL here
]
CORS_ALLOW_CREDENTIALS = True

# Logging setup
# Logs INFO+ messages into stdout

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', ],
            'level': 'INFO',
        },
        'django.server': {
            'handlers': ['console'],
            'level': 'INFO',
        }
    }
}

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

# Change to `ru-ru` to view the localization
# user `manage.py compilemessages` to apply localization
LANGUAGE_CODE = 'en-us'
LOCALE_PATHS = (
    os.path.join(BASE_DIR, "myproject/locale"),
)

TIME_ZONE = 'Europe/Moscow'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Root URL (if `/` is not root url for the project)

ROOT_URL = 'api/'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/
# Using AWS S3

# AWS Settings

AWS_ACCESS_KEY_ID = config.AWS_ACCESS_KEY_ID
AWS_SECRET_ACCESS_KEY = config.AWS_SECRET_ACCESS_KEY
AWS_STORAGE_BUCKET_NAME = config.AWS_STORAGE_BUCKET_NAME
AWS_DEFAULT_ACL = 'public-read'
AWS_S3_OBJECT_PARAMETERS = {'CacheControl': 'max-age=86400'}
AWS_S3_ENDPOINT_URL = config.AWS_S3_ENDPOINT_URL

# S3 Static Settings
STATIC_AWS_LOCATION = 'static'
STATIC_URL = f'{AWS_S3_ENDPOINT_URL}/{STATIC_AWS_LOCATION}/'
STATICFILES_STORAGE = 'myproject.config.storage.StaticStorage'

# S3 Media files settings

MEDIA_AWS_LOCATION = 'media'
MEDIA_URL = f'{AWS_S3_ENDPOINT_URL}/{MEDIA_AWS_LOCATION}/'
DEFAULT_FILE_STORAGE = 'myproject.config.storage.PublicMediaStorage'

PRIVATE_MEDIA_AWS_LOCATION = 'private'
PRIVATE_FILE_STORAGE = 'myproject.config.storage.PrivateMediaStorage'

## Default static setting

# STATIC_URL = f'/{ROOT_URL}static/'
# STATIC_ROOT = os.path.join(BASE_DIR, 'static')

## Default media settings

# MEDIA_URL = f'/{ROOT_URL}media/'
# MEDIA_ROOT = "media"

# Email setup

EMAIL_BACKEND = 'django_smtp_ssl.SSLEmailBackend'

EMAIL_HOST = config.EMAIL_HOST
EMAIL_PORT = config.EMAIL_PORT
EMAIL_HOST_USER = config.EMAIL_HOST_USER
EMAIL_HOST_PASSWORD = config.EMAIL_HOST_PASSWORD
EMAIL_USE_TLS = config.EMAIL_USE_TLS
EMAIL_USE_SSL = False
EMAIL_TO = config.EMAIL_TO

# Summernote settings

X_FRAME_OPTIONS = 'SAMEORIGIN'

# Django DBBackup settings

DBBACKUP_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"
DBBACKUP_STORAGE_OPTIONS = {
    "access_key": AWS_ACCESS_KEY_ID,
    "secret_key": AWS_SECRET_ACCESS_KEY,
    "bucket_name": AWS_STORAGE_BUCKET_NAME,
    "location": "backup/",
    "endpoint_url": AWS_S3_ENDPOINT_URL,
}
